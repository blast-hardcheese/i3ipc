#!/usr/bin/env python
"""
i3ipc - a general replacement for the perl-based i3-ipc provided with i3.

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from optparse import OptionParser
import i3ipc
from i3ipc import I3Socket, I3EventListener
from time import sleep
from os import environ

parser = OptionParser()
parser.add_option("-i", "--socket", dest="ipcfile", help="Set IPC socket location.")
parser.add_option("-s", "--send", dest="command", help="Send command to window manager.")
parser.add_option("-S", "--subscribe", dest="subscription", help="Print specified window manager events to STDOUT.")
parser.add_option("-W", "--get-workspace", dest="workspace", help="Get a named or indexed workspace information.")
parser.add_option("-w", "--get-workspaces", dest="workspaces", action="store_true", help="Get workspace information.")
parser.add_option("-o", "--get-outputs", dest="outputs", action="store_true", help="Get available RandR outputs.")
(options, args) = parser.parse_args()

if __name__ == '__main__':
    ipcfile = options.ipcfile if options.ipcfile else None

    if options.subscription:
        def listener(caller, data):
            print(data['event_payload'])

        if ',' in options.subscription:
            subscriptions = options.subscription.split(',')
            event_type = getattr(i3ipc, subscriptions[0])
            event_other = subscriptions[1] if len(subscriptions) > 1 else ''
        else:
            event_type = getattr(i3ipc, options.subscription)
            event_other = ''

        event = I3EventListener(listener, event_type, event_other, ipcfile)
        try:
            while event.is_alive():
                sleep(1)
        except KeyboardInterrupt:
            event.unsubscribe()

    else:
        socket = I3Socket(ipcfile)

        if options.command:
            print(socket.send_command(options.command)['payload'])
        elif options.workspace:
            workspaces = socket.get_workspaces()['payload']
            for workspace in workspaces:
                if workspace['name'].endswith(': ' + options.workspace) or\
                workspace['name'].startswith(options.workspace):
                    print(workspace)
        elif options.workspaces:
            print(socket.get_workspaces()['payload'])
        elif options.outputs:
            print(socket.get_outputs()['payload'])
