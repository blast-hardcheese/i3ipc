#!/usr/bin/env python

from optparse import OptionParser
from i3ipc import I3_IPCFILE, I3Socket, I3EventListener
from time import sleep

parser = OptionParser()
parser.add_option("-i", "--socket", dest="ipcfile", help="Set IPC socket location. [default: %s]" % (I3_IPCFILE,))
parser.add_option("-s", "--send", dest="command", help="Send command to window manager.")
parser.add_option("-S", "--subscribe", dest="subscription", help="Print specified window manager events to STDOUT.")
parser.add_option("-W", "--get-workspace", dest="workspace", help="Get a named or indexed workspace information.")
parser.add_option("-w", "--get-workspaces", dest="workspaces", action="store_true", help="Get workspace information.")
parser.add_option("-o", "--get-outputs", dest="outputs", action="store_true", help="Get available RandR outputs.")
parser.add_option("-r", "--raw", dest="raw", action="store_true", help="All output returns raw data.")
(options, args) = parser.parse_args()

if __name__ == '__main__':
    try:
        ipcfile = options.ipcfile if options.ipcfile else I3_IPCFILE
        socket = I3Socket(ipcfile=ipcfile, raw=options.raw)
    except:
        print("Socket file does not exist, or no options provided.  Use "\
              "'--help' for more information.")
        exit(1)

    if options.command:
        print(socket.send_command(options.command))

    if options.workspace:
        workspaces = socket.get_workspaces()
        for workspace in workspaces:
            if workspace['name'].endswith(': ' + options.workspace) or\
            workspace['name'].startswith(options.workspace):
                print(workspace)
    elif options.workspaces:
        print(socket.get_workspaces())
    elif options.outputs:
        print(socket.get_outputs())

    if options.subscription:
        def listener(caller, data):
            print(data)

        events = I3EventListener(listener, [options.subscription], ipcfile, raw=options.raw)
        try:
            while events.is_alive():
                sleep(1)
        except KeyboardInterrupt:
            events.unsubscribe()
