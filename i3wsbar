#!/usr/bin/python
"""
i3wsbar - a remake and expansion of the perl-based statsubar provided with i3.
          Depends on dzen2 being in your system path or a path to the exutable
          provided by the -d option.

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from i3ipc import *
import argparse, subprocess, signal


class I3Bar(object):
    FMT_BAR = "^p(_LEFT) {}^p(_RIGHT) \n"
    FMT_BTN = "^bg({})^ca(1,i3ipc -s {})[ {} ]^ca()"

    def __init__(self, dzen=None, font=None, ipcfile=I3_IPCFILE):
        dzen_args = [args.dzen,'-dock']
        if font: dzen_args.append('-fn {}'.format(font))
        self.dzen = subprocess.Popen(dzen_args, stdin=subprocess.PIPE)
        self.ipcfile = ipcfile
        self.barfmt = I3Bar.FMT_BAR
        self.btnfmt = I3Bar.FMT_BTN

        # initial display
        i3 = I3Socket(ipcfile=self.ipcfile)
        self.init(self, i3.get_workspaces())
        i3.close()

    def listener(self, caller, data):
        getattr(self, data['payload']['change'])(caller, data['event_payload'])

    def init(self, caller, data):
        self.bar = '^pa(_LEFT)'

        for ws in data['payload']:
            bgcolor = '#AA3333' if ws['urgent'] else '#333333' if ws['visible'] else ''
            wsnumber = ws['name'].split(':')[0] if ':' in ws['name'] else ws['name']

            wsbtn = self.btnfmt.format(bgcolor, wsnumber, ws['name'])
            self.bar = "{}{}".format(self.bar, wsbtn)

        self.dzen.stdin.write(self.barfmt.format(self.bar))

    def focus(self, event, data):
        self.init(event, data)

    def urgent(self, event, data):
        self.init(event, data)

    def empty(self, event, data):
        pass

    def loop(self):
        self.i3ev = subscribe(self.listener, I3_IPC_EVENT_WORKSPACE)
        while self.i3ev.is_alive():
            pass

    def close(self, *args):
        self.i3ev.unsubscribe()
        self.dzen.kill()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Replacement statusbar for i3 Window Manager.")
    parser.add_argument('-d', '--dzen', dest='dzen', default='/usr/bin/dzen2', help='dzen2 path.')
    parser.add_argument('-s', '--socket', dest='ipcfile', default=I3_IPCFILE, help='i3 socket file path.')
    parser.add_argument('-f', '--font', dest='font', default='', help='font used to render bar.')
    args = parser.parse_args()

    bar = I3Bar(dzen=args.dzen, font=args.font, ipcfile=args.ipcfile)
    signal.signal(signal.SIGINT, bar.close)
    signal.signal(signal.SIGTERM, bar.close)
    bar.loop()
